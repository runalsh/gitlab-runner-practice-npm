
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always 

stages:
  - test
  - secuirity
  - build
  - deploydev
  - deploystaging
  - deployprod

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: "1.2.0"
  DEVSERVER: 18.195.191.206
  DEVENDPOINT: http://ec2-18-195-191-206.eu-central-1.compute.amazonaws.com:3000
  STAGING_SERVER_HOST: 18.195.191.206
  STAGINGDPOINT: http://ec2-18-195-191-206.eu-central-1.compute.amazonaws.com:4000
  PROD_SERVER_HOST: 18.195.191.206
  PRODPOINT: http://ec2-18-195-191-206.eu-central-1.compute.amazonaws.com:5000

run_unit_test:
  image: node:17-alpine
  stage: test
  tags:
    - dockeralpinetag
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
    policy: pull-push  
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

run_lint_test:
  image: node:17-alpine
  stage: test
  tags:
    - dockeralpinetag
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules  
    policy: pull  
  before_script:
    - cd app
    - npm install
  script:
    - echo "run linter test"

sonarqube-check:
  stage: secuirity
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner      

sast:
  stage: secuirity

include:
  - template: Jobs/SAST.gitlab-ci.yml

build_image:
  # image: docker:stable
  # services:
  #   - docker:dind
  stage: build
  tags:
    - shelltag
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo "VERSION=$VERSION" >> version.env
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    # reports:
    #   dotenv: version.env
    paths:
     - version.env

push_image:
  stage: build
  needs: 
    - build_image
  tags:
    - shelltag
  before_script: 
    # - cat version.env
    # - export VERSION=$(cat version.env)   
    - echo "docker registry url is $CI_REGISTRY"
    - echo "docker image is $CI_REGISTRY_IMAGE"
    - echo "docker user is $CI_REGISTRY_USER"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION


.deploy:
  tags: 
    - shelltag
  dependencies:
    - build_image
  variables:
    SSH_KEY: ""
    SERVER_HOST: ""
    DEPLOY_ENV: ""
    APPPORT: ""
    ENDPOINT: ""
  before_script:
    - echo $SSH_KEY | sed -e "s/-----BEGIN RSA PRIVATE KEY-----/&\n/" -e "s/-----END RSA PRIVATE KEY-----/\n&/" -e "s/\S\{64\}/&\n/g"\ > deploy-key.pem
    - chmod 400 deploy-key.pem
    - export VERSION=$(cat version.env)
  script:
    - scp -o StrictHostKeyChecking=no -i deploy-key.pem ./docker-compose.yaml admin@$SERVER_HOST:/home/admin
    - ssh -o StrictHostKeyChecking=no -i deploy-key.pem admin@$SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && 
        export IMAGE_NAME=$IMAGE_NAME &&
        export IMAGE_TAG=$VERSION  &&
        export APPLICPORT=$APPPORT &&
        export COMPOSE_PROJECT_NAME=$DEPLOY_ENV &&
        docker compose down &&
        docker compose up -d"
  environment:
    name: $DEPLOY_ENV
    url: $ENDPOINT

deploy_to_dev:
  extends: .deploy
  stage: deploydev
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $DEVSERVER
    DEPLOY_ENV: development
    APPPORT: 3000
    ENDPOINT: $DEVENDPOINT

functional_test_dev:
  stage: deploydev
  needs:
    - deploy_to_dev
  script:
    - echo "running funct test" 
    - curl $DEVENDPOINT

deploy_to_staging:
  extends: .deploy
  stage: deploystaging
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $STAGING_SERVER_HOST
    DEPLOY_ENV: development
    APPPORT: 4000
    ENDPOINT: $STAGINGDPOINT

perfomance_test_staging:
  stage: deploystaging
  needs:
    - deploy_to_staging
  script:
    - echo "running performance test" 
    - curl $STAGINGDPOINT

deploy_to_prod:
  extends: .deploy
  stage: deployprod
  variables:
    SSH_KEY: $SSH_PRIVATE_KEY
    SERVER_HOST: $PROD_SERVER_HOST
    DEPLOY_ENV: production
    APPPORT: 5000
    ENDPOINT: $PRODPOINT
  when: manual  