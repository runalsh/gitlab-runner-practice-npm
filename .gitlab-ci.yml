# stages:
#     - build
#     - test
#     - deploy

# maven-build:
#   image: maven:3-jdk-11
#   stage: build
#   script: "mvn package -B"
#   artifacts:
#     paths:
#       - target/gitlab-ci-demo.jar

# image: alpine

# stages:
#   - compile
#   - test
#   - package

# compile:
#   stage: compile
#   script: 
#     - echo "Hello world 1" > file1.txt
#     - echo "Hello world 2" > file2.txt
#     - cat file1.txt file2.txt > compiled.txt
#   artifacts:
#     paths:
#     - compiled.txt
#     - file1.txt


# test:
#   stage: test
#   script: cat compiled.txt | grep -q 'Hello world'

# pack-gz:
#   stage: package
#   script: cat compiled.txt | gzip > packaged.gz
#   artifacts:
#     paths:
#     - packaged.gz
#     - file1.txt

# pack-iso:
#   stage: package
#   before_script:
#   - echo "ipv6" >> /etc/modules
#   - apk update
#   - apk add xorriso
#   script:
#   - mkisofs -o ./packaged.iso ./compiled.txt
#   artifacts:
#     paths:
#     - packaged-$CI_JOB_ID-$CI_COMMIT_SHORT_SHA.iso    


# stages:
#   - build
#   - runeeeeeee

# build-docker:
#   stage: build
#   image: docker:stable
#   only:
#     - main
#   services:
#     - docker:dind
#   before_script:
#     - docker login -u gitlab+deploy-token-1249784 -p ${ACCESS_TOKEN} registry.gitlab.com
#   script:
#     - docker build -t ${DOCKER_ENV_CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME} --build-arg branch=${CI_COMMIT_REF_NAME} .
#     - docker push ${DOCKER_ENV_CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}
    
# running:
#   stage: runeeeeeee
#   only: 
#     - main
#   before_script:
#     - docker login -u gitlab+deploy-token-1249784 -p ${ACCESS_TOKEN} registry.gitlab.com
#   script:
#     - docker run -p 3000:3000 --name test-ci registry.gitlab.com/runalsh/mymymy:main

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always 

stages:
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_TAG: "1.2"
  DEVSERVER: 18.195.191.206
  DEVENDPOINT: http://ec2-18-195-191-206.eu-central-1.compute.amazonaws.com

run_unit_test:
  image: node:17-alpine3.14
  stage: test
  tags:
    - dockeralpinetag
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

build_image:
  # image: docker:stable
  # services:
  #   - docker:dind
  stage: build
  tags:
    - shelltag
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

push_image:
  stage: build
  needs: 
    - build_image
  tags:
    - shelltag
  before_script:    
    - echo "docker registry url is $CI_REGISTRY"
    - echo "docker image url is $CI_REGISTRY_IMAGE"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$IMAGE_TAG


deploy_to_dev:
    stage: deploy
    tags: 
      - shelltag
    before_script:
      - chmod 400 $SSH_PIVATE_KEY
    script:
      - scp -o StrictHostKeyChecking=no -i $SSH_PIVATE_KEY ./docker-compose.yaml admin@$DEVSERVER:/home/admin
      - ssh -o StrictHostKeyChecking=no -i $SSH_PIVATE_KEY admin@$DEVSERVER "
          docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && 
          docker compose -f docker-compose.yaml down &&
          docker compose -f docker-compose.yaml up -d"
    environment:
      name: development
      url: $DEVENDPOINT





